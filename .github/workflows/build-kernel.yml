name: Build Kernel with KernelSU

# 定义环境变量，方便修改
env:
  KERNEL_CONFIG: jason_defconfig
  BUILD_ARGS: LLVM=1 LLVM_IAS=1

# 工作流的具体任务
jobs:
  build:
    # 在最新的Ubuntu系统上运行
    runs-on: ubuntu-latest

    # 步骤序列
    steps:
    # 步骤1：下载你的内核源代码
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: crdroidandroid/android_kernel_xiaomi_jason
        ref: 15.0 # 使用你需要的分支

    # 步骤2：下载 KernelSU Next 补丁文件
    - name: Download KernelSU Next Patch
      run: |
        # ！！！重要：将下面的URL替换成你刚才复制的真实补丁文件地址！！！
        wget -O ksu_patch.patch "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main"

    # 步骤3：给内核源码打上 KSU 补丁
    - name: Apply KernelSU Patch
      run: |
        # 应用补丁，如果失败会退出工作流
        patch -p1 < ksu_patch.patch

    # 步骤4：修改内核配置文件，启用KSU
    - name: Enable KSU in Config
      run: |
        # 这行命令会在配置文件的末尾添加两行必要的设置
        echo "CONFIG_KSU=y" >> arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        # 显示一下文件尾部，确认添加成功（用于调试）
        tail -n 5 arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    # 步骤5：设置编译环境（安装必要的软件）
    - name: Set Up Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y git ccache flex bison build-essential libncurses-dev libssl-dev libelf-dev

    # 步骤6：开始编译内核
    - name: Build Kernel
      run: |
        # 准备编译输出目录和配置文件
        make O=out ARCH=arm64 ${{ env.KERNEL_CONFIG }}
        # 开始编译，使用所有可用的CPU核心以加快速度
        make -j$(nproc --all) O=out ARCH=arm64 ${{ env.BUILD_ARGS }}

    # 步骤7：上传编译好的内核文件（你之前出错的地方）
    - name: Upload Kernel Image
      uses: actions/upload-artifact@v4
      with:
        # 产物的名称，你可以随便改
        name: My-Kernel-with-KSU
        # 要上传的文件路径！！！这就是之前 missing 的 'path' 参数！
        # 这是最常见的内核镜像路径，如果你的不一样，需要修改
        path: out/arch/arm64/boot/Image.gz-dtb
        # 如果找不到文件，报警告而不是错误，方便排查
        if-no-files-found: warn
